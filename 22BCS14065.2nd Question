import java.util.concurrent.locks.ReentrantLock;

class TicketBookingSystem {
    private static final int TOTAL_SEATS = 10;
    private boolean[] seats = new boolean[TOTAL_SEATS];
    private ReentrantLock lock = new ReentrantLock();

    public void bookSeat(int seatNumber, String customer) {
        lock.lock();
        try {
            if (seatNumber < 0 || seatNumber >= TOTAL_SEATS) {
                System.out.println(customer + " - Invalid seat number!");
                return;
            }
            if (!seats[seatNumber]) {
                seats[seatNumber] = true;
                System.out.println(customer + " successfully booked seat " + seatNumber);
            } else {
                System.out.println(customer + " - Seat " + seatNumber + " is already booked!");
            }
        } finally {
            lock.unlock();
        }
    }
}

class BookingThread extends Thread {
    private TicketBookingSystem bookingSystem;
    private int seatNumber;
    private String customer;

    public BookingThread(TicketBookingSystem bookingSystem, int seatNumber, String customer, int priority) {
        this.bookingSystem = bookingSystem;
        this.seatNumber = seatNumber;
        this.customer = customer;
        this.setPriority(priority);
    }

    @Override
    public void run() {
        bookingSystem.bookSeat(seatNumber, customer);
    }
}

public class TicketBookingApp {
    public static void main(String[] args) {
        TicketBookingSystem bookingSystem = new TicketBookingSystem();

        Thread vip1 = new BookingThread(bookingSystem, 2, "VIP User 1", Thread.MAX_PRIORITY);
        Thread vip2 = new BookingThread(bookingSystem, 3, "VIP User 2", Thread.MAX_PRIORITY);
        Thread user1 = new BookingThread(bookingSystem, 2, "Regular User 1", Thread.NORM_PRIORITY);
        Thread user2 = new BookingThread(bookingSystem, 3, "Regular User 2", Thread.NORM_PRIORITY);
        Thread user3 = new BookingThread(bookingSystem, 5, "Regular User 3", Thread.MIN_PRIORITY);

        vip1.start();
        vip2.start();
        user1.start();
        user2.start();
        user3.start();
    }
}
